<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" content="user-scalable=no"/>

    <title>match color</title>

    <style>
        *{margin: 0;padding: 0;}
        #container {
            position: absolute;
            height: 100%;
            width: 100%;
        }
        #output {
            width: 100%;
            height: 100%;
        }
        .color{
            width: 120px;
            height: 20px;
            margin: 0 auto;
            position: fixed;
            left: 50%;
            margin-left: -60px;

            bottom: 20px;
        }
        .color li{
            float: left;
            margin: 0 5px;
            width: 20px;
            height: 20px;
            background: #ccc;
            box-shadow: 0 0 4px #FFF;
            list-style: none;
            cursor: pointer;
        }
        .color li:nth-child(1){
            background: #002c4a;
        }
        .color li:nth-child(2){
            background: #35ac03;
        }
        .color li:nth-child(3){
            background: #ac0908;
        }
        .color li:nth-child(4){
            background: #18bbff;
        }

    </style>


    <style>
        @media (device-width:375px) and (-webkit-min-device-pixel-ratio:3.0){/* 兼容iphone6 plus */
            body {
                margin: 0;
                padding: 0;
                /*background-repeat: no-repeat;*/
                /*background-image: url("images/game/bg1242-2280.png");*/


            }
        }

    </style>

    <script src="js/pixi.js"></script>
    <script src="js/vector.js"></script>
    <script src="js/jquery-2.2.4.min.js"></script>

<!--  --------------------------------------- common dynaic backgoround set up  fro container Div ---------------------------------- -->
    <script>
        $(function(){
            var victor = new Victor("container", "output");
            var theme = [
                ["#002c4a", "#005584"],
                ["#35ac03", "#3f4303"],
                ["#ac0908", "#cd5726"],
                ["#18bbff", "#00486b"]
            ]
            $(".color li").each(function(index, val) {
                var color = theme[index];
                $(this).mouseover(function(){
                    victor(color).set();
                })
            });
        });
    </script>
</head>
<body>
<div>
    <div id="container" ><div id="output"></div></div>
</div>
<div style="position: relative;">
    <div id ="bgdiv" style="position: absolute; width:100%;height:100%"></div>
    <div id = 'gamediv'style="position: absolute;"></div>
    <div id = 'introResultdiv'style="position: absolute;background-color: #e5004f; opacity: 0.95; margin:0px; padding: 0px; border: 0px ">
    </div>
</div>
<script>

    //------------------------------------------------- tex tyle ----------------------------------------------------------------

    var gameoverStyle = {
        font : 'bold italic 200px Arial',
        fill : '#e4007f',
        stroke : '#ffcee9',
        strokeThickness : 10,
        dropShadow : true,
        dropShadowColor : '#000000',
        dropShadowAngle : Math.PI / 6,
        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 540
    };

    var style2 = {
        font : 'bold italic 100px Arial',
        fill : '#F7EDCA',
        stroke : '#4a1850',
        strokeThickness : 5,
//        dropShadow : true,
//        dropShadowColor : '#000000',
//        dropShadowAngle : Math.PI / 6,
//        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 640
    };

    var introstyle = {
        font : 'bold italic 60px Arial',
        fill : '#F7EDCA',
//        stroke : '#4a1850',
//        strokeThickness : 5,
//        dropShadow : true,
//        dropShadowColor : '#000000',
//        dropShadowAngle : Math.PI / 6,
//        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 440
    };


    var style = {
        font : 'bold italic 200px Arial',
        fill : '#F7EDCA',
        stroke : '#4a1850',
        strokeThickness : 5,
//        dropShadow : true,
//        dropShadowColor : '#000000',
//        dropShadowAngle : Math.PI / 6,
//        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 440
    };
    var rubbishArray =[];
    var rubbishVal = [0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2];
    var rubbishName =
            ["  Coffee Cup  ","  Coffee Cup  ","     Can     ","     Can     "," Glass Bottle "," Glass Bottle ",
                "Plastic Bottles","Plastic Bottles","Food container","Food container",
                "  Magazine  ","   Leaflet   "," Newspaper ","    Carton    "," Chip packet ","Lolly wrapper",
                "Soft plastic wrap"," Plastic bag "," Apple core "," Banana peel ","   Sandwich   ","    Hotdog    ","   Tea bag   "," Paper towel ","    Tissue    "];


    for(var i = 1 ; i <= 25; i++) {

        PIXI.loader.add("rubbish"+i, "img/game1/"+"rubbish"+i+".png");
    }
    var startPage = PIXI.Sprite.fromImage("img/game1/start.png");
 //------------------------------------------------- load resourcd ----------------------------------------------------------------

    var indexpic = 0;
    var wastePic = new PIXI.Sprite.fromImage("img/game1/" + "default_bin.png");  // waste pic must be add here because the micro animation will use wastePic so it can not be decleared in  placeTiles()
    var wasteLabel;  //  if a micro animition will be added into this element is must be decleared outside placeTiles()

    var isloadfinish = false;

    // all resource will be loaded. the resource path will be kept in game1 json
    PIXI.loader.add("json/game1.json").load(finishLoad);
    PIXI.loader.add("img/sounds/bgmusic.mp3");
    PIXI.loader.add("img/sounds/levelUp.mp3");
    PIXI.loader.add("img/sounds/rtClick.mp3");
    PIXI.loader.add("img/sounds/gameover.mp3");
    PIXI.loader.add("img/sounds/lose.mp3");
    PIXI.loader.add("img/sounds/cound_down1.mp3");
    PIXI.loader.add("img/sounds/cound_down3.mp3");
    PIXI.loader.add("img/game1/start.png");
    PIXI.loader.add("img/game1/game1level2intro.png");
    PIXI.loader.add("img/game1/logo-nobg.png");
    PIXI.loader.add("img/game1/game1level1intro.png");

    for(var i =0; i<=8;i++ ){
        PIXI.loader.add("img/game1/"+i+".png");
    }



    // ------------ initial first intropage
    var intropage = PIXI.Sprite.fromImage("img/game1/game1level1intro.png");



    var round = 0;
    //    var totalround = 3;
    function finishLoad(){    // if finish laod rsource  set isloadfinish true intro page show.
        //some function after the web has been loaded

        intropage.alpha= 0;
        intropage.anchor.set(0.5);
        intropage.x = window.innerWidth/2;
        intropage.y = window.innerHeight/2;


//        intropage.scale.set(window.innerWidth/intropage.width)*0.1;
        intropage.buttonMode = true;
        intropage.interactive = true;


        var scaleValue = window.innerWidth * 0.2;



        for (var i = 1; i <= 25; i++) {
            rubbishArray.push(new PIXI.Sprite.fromImage("img/game1/" + "rubbish" + i + ".png"));
            rubbishArray[i - 1].anchor.set(0.5);


            rubbishArray[i - 1].width = window.innerWidth * 0.35;
            rubbishArray[i - 1].height = window.innerWidth * 0.35;

//            rubbishArray[i - 1].scale.x = 0.2;
//            rubbishArray[i - 1].scale.y = 0.2;
            rubbishArray[i - 1].theVal = rubbishVal[i-1];
            rubbishArray[i - 1].theName = rubbishName[i-1];




        }
        shuffleRubbishArry();




         wastePic = rubbishArray[round]; // waste pic must be add here because the micro animation will use wastePic so it can not be decleared in  placeTiles()
         wasteLabel = new PIXI.Text(rubbishArray[round].theName,{font : '80px Constantia', fill : 0xFFFFFF, align : 'center center'});  //  if a micro animition will be added into this element is must be decleared outside placeTiles()



         wasteLabel.scale.set((wastelabelboardWidth-wasteboardRadius1)*0.9/wasteLabel.width);


            try_again_btn.scale.set(window.innerWidth*0.6/try_again_btn.width);
            back_btn.scale.set(window.innerWidth*0.6/back_btn.width);
            try_again_btn.position.x = window.innerWidth/2 ;
            try_again_btn.position.y =window.innerHeight*0.8;

            back_btn.position.x = window.innerWidth/2 ;
            back_btn.position.y =try_again_btn.position.y+try_again_btn.height+try_again_btn.height;

        isloadfinish = true;
    }

    //------------------------------------------------- game parameters set up ----------------------------------------------------------------


    // whether show the start page
    var isstartshow = false;
    // whether the game is start
    var isgamesatrt = false;
    // initially if is game doest not stat the into page will be displayed
    var intropageshow = true;
    // for micro animation loop control
    var animationcount =0;
    // set fist leve game time. 60 seconds
    var gameTime = 60;
    var isgameover = false;
    var newlevel  = true;
    var level = 1;
    var newRound = false;


    var totalScore =0;
    var totlalError  =0;
    var maxError=3;
    var canPick = false;

    // level1 start countdown seconds
    var second= 4;
    var timer;
    var circlecount = 0;
    var gameTimer;
    // level2 start countdown seconds
    var second2 = 4;
    var timer2;

    var selectedRightColor = 0;
    var totalRightColor = 4;  // the number of level 1 right color in each round
    var totalRightColor2 = 4;   // the number of level 2 right color in each round


    var rottimes = -10; // for waste pic animation
    var isReverse = false;  // for waste pic animation

//    var rubbishArray =[];
    // origianl waste type value array   0 recycle 1 waste

    //------------------------------------------------- music set up ----------------------------------------------------------------

    var backGround_sound = new Audio("img/sounds/bgmusic.mp3");
    var backGround_sound = new Audio("img/sounds/bgmusic.mp3");
    backGround_sound.loop = true;
    var levelUp_sound=  new Audio("img/sounds/levelUp.mp3");
    var newRound_sound =  new Audio("img/sounds/newRound.mp3");
    var rtClick_sound = new Audio("img/sounds/rtClick.mp3");
    //    var wrClick_sound = new Audio("sounds/wrClick.mp3");
    var wrClick_sound = new Audio("img/sounds/wrClick.mp3");
    var gameOver_sound = new Audio("img/sounds/gameover.mp3");
    var loose_sound = new Audio("img/sounds/lose.mp3");
    var countDown_sound = new Audio("img/sounds/cound_down1.mp3");
    //last game countdown sound
    var countDown_sound2 = new Audio("img/sounds/cound_down3.mp3");

    backGround_sound.loop = true;

    //----------------------------------------------  introResultdiv  basic set up -----------------------------------------------------
    // for introResultdiv container
    var introResultstage = new PIXI.Container();
    // for introResultdiv animation
    var  introResultdivrendergraphics = new PIXI.Graphics();
    // for introResultdiv render
    var introResultdivrenderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight,{ transparent: true});
    introResultstage.addChild(introResultdivrendergraphics);
    document.getElementById('introResultdiv').appendChild(introResultdivrenderer.view);
    introResultdivrenderer.render(introResultstage);


    //----------------------------------------------- bgdiv basic set up  for background animation -----------------------------------------
    var bgstage = new PIXI.Container();
    var bgrenderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight,{ transparent: true });
    //	var bgrenderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight);

    bgrenderer.backgroundColor = 0x005a9c;

    document.getElementById('bgdiv').appendChild(bgrenderer.view);

    // 2 background coin pic. They are not necessary
    var coinLogoPic = PIXI.Sprite.fromImage("img/game1/logo-nobg.png");
    var coinLogoPic2 = PIXI.Sprite.fromImage("img/game1/logo-nobg.png");

    coinLogoPic2.anchor.set(0.5);
    coinLogoPic.anchor.set(0.5);

    coinLogoPic.position.x = window.innerWidth*1.2;
    coinLogoPic.position.y = window.innerHeight*0.6;

    coinLogoPic.width = coinLogoPic.height = window.innerHeight/1.7;

//    coinLogoPic.scale.set(window.innerHeight);
    coinLogoPic2.position.x = -200;
    coinLogoPic2.position.y = window.innerHeight/2+190;

    coinLogoPic2.scale.set(0.9);

    // let's create a moving shape
    var bggraph = new PIXI.Graphics();
    bgstage.addChild(bggraph);
    bgstage.addChild(coinLogoPic);
    bgrenderer.render(bgstage);

//---------------------------------------------------------------------------- waste pic

// the total waste types&&icons
//   var rubbishArray =[ [0,'imgs/game1/plastic_bottle_empty.png','Plastic Bottle'],[1,'imgs/game1/plastic_bag.png','Plastic Bag'],[2,'imgs/game1/appple_core.png','Apple Core']]


//---------------------------------------------------------------------------- random the waste the order

   function shuffleRubbishArry(){

    // shuffle the waste order
    for(i=0;i<48;i++){
        var from = Math.floor(Math.random()*25);
        var to = Math.floor(Math.random()*25);
        var tmp = rubbishArray[from];
        rubbishArray[from]=rubbishArray[to];
        rubbishArray[to]=tmp;
    }
   }


    //---------------------------------- game element set up -------------------------------

    // Offset of each block
    var offset = window.innerWidth*0.008;
    // Basic settings
    var objectNumber = 3;
    var objectWidth =  window.innerWidth*0.1949;

    var renderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight,{ transparent: true })
    renderer.backgroundColor = 0x005a9c;

    document.getElementById('gamediv').appendChild(renderer.view);

    var stage = new PIXI.Container();
    var graphics = new PIXI.Graphics();


    //------------------------------------------------------------------------------ waste label board

    var wastelabelboardWidth = (window.innerWidth)*0.72;
    var wastelabelboardHight = (window.innerHeight)*0.25;
    var wastelabelboardZoonstartX =  0;
    var wastelabelboardZoonstartY = window.innerHeight* 0.07;

    graphics.moveTo(wastelabelboardZoonstartX, wastelabelboardZoonstartY);
    graphics.beginFill(0x002866,0.9);
    graphics.drawRect(wastelabelboardZoonstartX, wastelabelboardZoonstartY, wastelabelboardWidth, wastelabelboardHight, 10);
    graphics.endFill();


    //------------------------------------------------------------------------------ gameZone

    var totalWidth = window.innerWidth*0.68;
    var totalHight  = window.innerWidth*0.7*1.26;

    // Position of the inside window
    var gameZoonstartX = (window.innerWidth-totalWidth)/2;
    var gameZooonstartY = (window.innerHeight* 0.07+(window.innerHeight)*0.25*0.5+ (window.innerHeight)/6.3)+((window.innerHeight - (window.innerHeight* 0.07+(window.innerHeight)*0.25*0.5+ (window.innerHeight)/6.3))- totalHight)/2
    // Initial position
    graphics.moveTo(gameZoonstartX, gameZooonstartY);
    graphics.beginFill(0x02316c,0.9);
    graphics.drawRoundedRect(gameZoonstartX, gameZooonstartY, totalWidth, totalHight, 10);
    graphics.endFill();

    //------------------------------------------------------------------------------ time&&score bar
    var timescoreBarHigh = wastelabelboardHight*0.2;
    var timescoreBarX = 0;
    var timescoreBarY = wastelabelboardZoonstartY + wastelabelboardHight - timescoreBarHigh;
    var timescoreBarWidth = wastelabelboardWidth;

    graphics.moveTo(timescoreBarX, timescoreBarX);
    graphics.beginFill(0x3498db,1);

    graphics.drawRect(timescoreBarX, timescoreBarY, timescoreBarWidth, timescoreBarHigh);

    graphics.endFill();


    //------------------------------------------------------------------------------ waste board
    var wasteboardRadius1 = (window.innerHeight)/7.2;
    var wastboardRadius2 = (window.innerHeight)/6.3;

    var wasteboardCenterX = wastelabelboardWidth ;
    var wasteboardCenterY = wastelabelboardZoonstartY+(wastelabelboardHight/2);

    graphics.moveTo(wasteboardCenterX, wasteboardCenterY);
    graphics.beginFill(0xfacd89, 1);
    graphics.drawCircle(wasteboardCenterX, wasteboardCenterY,wastboardRadius2);
    graphics.endFill();

    graphics.beginFill(0xffffff, 1);
    graphics.drawCircle(wasteboardCenterX, wasteboardCenterY,wasteboardRadius1);
    graphics.endFill();

    //------------------------------------------------------------------------------ time text


    var countingText = new PIXI.Text('Time Left: 60', { font: '35px Arial', fill: '#f1c40f', align: 'center' });
    countingText.anchor.x = 0.5;
    countingText.anchor.y =0.5;
    countingText.scale.set(timescoreBarHigh*0.5/countingText.height);
    countingText.position.x = (wastelabelboardWidth - wastboardRadius2)/4;
    countingText.position.y = wastelabelboardZoonstartY + (wastelabelboardHight-timescoreBarHigh)+(timescoreBarHigh)/2;
    countingText.text = 'Time Left: ' + Math.floor(gameTime);

    //------------------------------------------------------------------------------ score text

    var totalScoreText = new PIXI.Text('Score: 0', { font: '35px Arial', fill: '#f1c40f', align: 'center' });

    totalScoreText.anchor.x = 0.5;
    totalScoreText.anchor.y = 0.5;
    totalScoreText.scale.set(timescoreBarHigh*0.5/totalScoreText.height);
    totalScoreText.position.x = countingText.position.x +(countingText.width)+totalScoreText.width/5;
    totalScoreText.position.y = countingText.position.y ;

    //----------------------------------------------------------------------------------------------------------------------- set countdown/commn text

    var richText = new PIXI.Text('',style);
    richText.anchor.x = 0.5;
    richText.anchor.y = 0.5;
    richText.scale.set(totalHight*0.3/richText.height);
    richText.x = window.innerWidth/2;
    richText.y = window.innerHeight/1.75;
    richText.alpha = 0.9;


    //--------------------------- the gamediv include static game zone and some element s like time&&score&&waste&&wasste label -------------------------------------------------------

    // this 3 element will always displayed on screen while the waste pic,game element and wstelabel sometimes will be removed from the stage
    // aste pic,game element and wstelabel  will be added into stage  in placeTiles()
    // game time text

    stage.addChild(graphics);
    stage.addChild(totalScoreText);
    stage.addChild(countingText);

    // richText should be added at last so as to be displayed on teh
    stage.addChild(richText);





    var try_again_btn_up_texture = PIXI.Texture.fromImage('img/try_again_up.png');
    var try_again_btn_down_texture = PIXI.Texture.fromImage('img/try_again_down.png');
    var back_btn_up_texture = PIXI.Texture.fromImage('img/back_up.png');
    var back_btn_down_texture = PIXI.Texture.fromImage('img/back_down.png');


    PIXI.loader.add("try_again_btn","img/try_again_up.png");

    PIXI.loader.add("back_btn","img/back_up.png");

    var try_again_btn = new PIXI.Sprite(try_again_btn_up_texture);
    //    var try_again_down  = PIXI.Sprite.fromImage("imgs/try_again_down.png");

    try_again_btn.buttonMode = true;
    try_again_btn.interactive = true;
    try_again_btn.anchor.set(0.5);


    try_again_btn.mousedown = try_again_btn.touchstart = function(data){
        rtClick_sound.play();
        try_again_btn.texture = try_again_btn_down_texture;
        introResultdivrenderer.render(introResultstage);
//        try_again_btn.tint = 0x000000;
//        try_again_btn.alpah = 0.5;
        location.href='match_color.ejs';

    }

    var back_btn =  new PIXI.Sprite(back_btn_up_texture);

    back_btn.buttonMode = true;
    back_btn.interactive = true;

    back_btn.anchor.set(0.5);




    back_btn.mousedown = back_btn.touchstart = function(data){
        rtClick_sound.play();
        back_btn.texture = back_btn_down_texture;
        introResultdivrenderer.render(introResultstage);
        location.href='gamepage.ejs';

    }

    // ------------ initial start page intropage, currentlly it is only an interactive pic




    //------------------------------------------------------------------------------
    //------------------------   level1 main funciotn  -----------------------------
    //------------------------------------------------------------------------------

    function placeTiles(){
        rottimes =-10;
        var maskArray  = new Array();
        var index =0;
        //------------------------------------------------------------------------------ waste board pic

        wastePic = rubbishArray[round];
        wastePic.anchor.x =0.5;
        wastePic.anchor.y =0.5;
//        wastePic.scale.set(0.3);

       //	wastePic.scale = 1;

        wastePic.position.x = wasteboardCenterX;
        wastePic.position.y = wasteboardCenterY;

        //------------------------------------------------------------------------------ waste label text

        wasteLabel = new PIXI.Text(rubbishArray[round].theName,{font : '60px Constantia', fill : 0xFFFFFF, align : 'center center'});
        wasteLabel.anchor.x = 0.5;
        wasteLabel.anchor.y = 0.5;
        wasteLabel.position.x = ((wastelabelboardWidth - wastboardRadius2))/2;
        wasteLabel.position.y = wastelabelboardZoonstartY + (wastelabelboardHight-timescoreBarHigh)/2;

        wasteLabel.scale.set((wastelabelboardWidth-wasteboardRadius1)*0.8/wasteLabel.width);



        stage.addChild(wastePic);
        stage.addChild(wasteLabel);
        newRound = false;

        var chosenTiles = new Array();

        for(i=0;i<12;i++){

            chosenTiles[i] =  i%3;

        }

        // shuffle the chosen tiles
        for(i=0;i<48;i++){
            var from = Math.floor(Math.random()*12);
            var to = Math.floor(Math.random()*12);
            var tmp = chosenTiles[from];
            chosenTiles[from]=chosenTiles[to];
            chosenTiles[to]=tmp;
        }

        for (var j = 0,l=1; j <= 3; j++,l++) {
            for (var i=0,k = 1; i < 3; i++,k++) {

                var tile = PIXI.Sprite.fromImage('img/game1/'+chosenTiles[index]+'.png');

                tile.width = window.innerWidth*0.1949;
                tile.height = window.innerWidth*0.1949;
                maskArray.push(tile);

                tile.buttonMode = true;
                tile.interactive = true;
                // is the tile selected?
                tile.isSelected = false;
                // set a tile value
                tile.theVal = chosenTiles[index];

                index++;
                // place the tile



                tile.position.x = gameZoonstartX+(totalWidth -offset*2-objectWidth*3)/2+objectWidth*i+offset*(k-1);
                tile.position.y = gameZooonstartY+(totalHight -offset*3-objectWidth*4)/2+objectWidth*j+offset*(l-1);

                // paint tile black
                tile.tint = 0x000000;
                // set it a bit transparent (it will look grey)
                tile.alpha = 0.5;
                // add the tile
                stage.addChild(tile);
                // mouse-touch listener

                var selectedTile = null;
                tile.mousedown = tile.touchstart = function (data) {

                    // can I pick a tile?
                    if (canPick) {

                        if (!this.isSelected) {

//						alert(this.theVal);

                            this.isSelected = true;
                            selectedTile = this;

                            this.tint = 0xffffff;
                            this.alpha = 1;

                            if (this.theVal == rubbishArray[round].theVal) {

                                var texture = PIXI.Texture.fromImage('img/game1/'+(selectedTile.theVal + 6)+'.png');



                                texture.width = window.innerWidth*0.1949;
                                texture.height = window.innerWidth*0.1949;


                                this.setTexture(texture);


                                totalScore += 20;
                                totalScoreText.text =  'Score: '+ totalScore;

                                selectedRightColor++;
                                if (selectedRightColor != totalRightColor) {

                                    rtClick_sound.play();
                                }

                                if (selectedRightColor == totalRightColor) {

                                    newRound_sound.play();



                                    setTimeout(function () {

                                        selectedRightColor = 0;
                                        canPick= false;

                                        totlalError = 0;

                                        round++;

                                        index=0;
                                        stage.removeChildren(3, stage.children.length);

                                        round = round%24;

                                        newRound = true;

                                    }, 100);




                                }

                            }
                            else {

                                var texture = PIXI.Texture.fromImage('img/game1/'+(selectedTile.theVal + 3)+'.png');



                                texture.width = window.innerWidth*0.1949;
                                texture.height = window.innerWidth*0.1949;

                                selectedTile.setTexture(texture);

                                totlalError ++;


                                if(totlalError< maxError) {
                                    wrClick_sound.play();
                                }

                                if(totlalError >= maxError){
                                    countDown_sound.pause();
                                    backGround_sound.pause();

                                    loose_sound.play();

                                    canPick = false;

                                    clearTimeout(gameTimer);

                                    isgamesatrt = false;
                                    isgameover= true;

                                    document.getElementById('introResultdiv').style.display = "block";

                                    introResultstage.addChild(introResultdivrendergraphics);


                                }

                            }

                        }

                    }
                }

            }

        }
        //----------------------------------------------------------------------------------------------------------------------- set 3 seconds masked tile

        setTimeout(function () {

            for(var i =0; i <maskArray.length;i++){

                maskArray[i].tint = 0xffffff;
                maskArray[i].alpha = 1;

            };
            canPick= true;

            //selectedTile.setTexture(PIXI.Texture.fromImage(selectedTile.theVal-3));

        }, 1000);
    }

    //------------------------------------------------------------------------------
    //------------------------   level2 main funciotn  -----------------------------
    //------------------------------------------------------------------------------

    function placeTiles2(){
        rottimes =-10;
        var maskArray  = new Array();
        var index =0;
        newRound = false;
        //------------------------------------------------------------------------------ waste board pic


        wastePic = rubbishArray[round];
        wastePic.anchor.x =0.5;
        wastePic.anchor.y =0.5;

//	wastePic.scale = 1;

        wastePic.position.x = wasteboardCenterX;
        wastePic.position.y = wasteboardCenterY;

        //------------------------------------------------------------------------------ waste label text

        wasteLabel = new PIXI.Text(rubbishArray[round].theName,{font : '60px Constantia', fill : 0xFFFFFF, align : 'center center'});
        wasteLabel.anchor.x = 0.5;
        wasteLabel.anchor.y = 0.5;
        wasteLabel.position.x = ((wastelabelboardWidth - wastboardRadius2))/2;
        wasteLabel.position.y = wastelabelboardZoonstartY + (wastelabelboardHight-timescoreBarHigh)/2;

        wasteLabel.scale.set((wastelabelboardWidth-wasteboardRadius1)*0.9/wasteLabel.width);

        stage.addChild(wastePic);
        stage.addChild(wasteLabel);


        var chosenTiles = new Array();

        for(i=0;i<12;i++){

            chosenTiles[i] =  i%3;

        }

        // shuffle the chosen tiles
        for(i=0;i<48;i++){
            var from = Math.floor(Math.random()*12);
            var to = Math.floor(Math.random()*12);
            var tmp = chosenTiles[from];
            chosenTiles[from]=chosenTiles[to];
            chosenTiles[to]=tmp;
        }

        for (var j = 0,l=1; j <= 3; j++,l++) {
            for (var i=0,k = 1; i < 3; i++,k++) {

                var tile = PIXI.Sprite.fromImage('img/game1/'+chosenTiles[index]+'.png');


                tile.width = window.innerWidth*0.1949;
                tile.height = window.innerWidth*0.1949;

                maskArray.push(tile);

                tile.buttonMode = true;
                tile.interactive = true;
                // is the tile selected?
                tile.isSelected = false;
                // set a tile value
                tile.theVal = chosenTiles[index];

                index++;
                // place the tile

                tile.position.x = gameZoonstartX+(totalWidth -offset*2-objectWidth*3)/2+objectWidth*i+offset*(k-1);
                tile.position.y = gameZooonstartY+(totalHight -offset*3-objectWidth*4)/2+objectWidth*j+offset*(l-1);

                // paint tile black
                tile.tint = 0xffffff;
                // set it a bit transparent (it will look grey)
                tile.alpha = 1;
                // add the tile
                stage.addChild(tile);
                // mouse-touch listener

                var selectedTile = null;
                tile.mousedown = tile.touchstart = function (data) {

                    // can I pick a tile?
                    if (canPick) {


                        if (!this.isSelected) {

//						alert(this.theVal);

                            this.isSelected = true;
                            selectedTile = this;

                            this.tint = 0xffffff;
                            this.alpha = 1;

                            if (this.theVal == rubbishArray[round].theVal) {


                                var texture = PIXI.Texture.fromImage('img/game1/'+(selectedTile.theVal + 6)+'.png');

                                texture.width = window.innerWidth*0.1949;
                                texture.height = window.innerWidth*0.1949;

                                this.setTexture(texture);


                                totalScore += 20;
                                totalScoreText.text =  'Score: '+ totalScore;
//							alert('pick red right!');

                                selectedRightColor++;


                                if (selectedRightColor != totalRightColor) {

                                    rtClick_sound.play();
                                }

                                if (selectedRightColor == totalRightColor2) {

                                    newRound_sound.play();




                                    setTimeout(function () {

                                        selectedRightColor = 0;
                                        canPick= false;

                                        totlalError = 0;


                                        round++;

                                        index=0;
                                        stage.removeChildren(3, stage.children.length);

                                        round = round%24;

                                        newRound = true;


                                    }, 100);




                                }

                            }
                            else {

                                wrClick_sound.play();


                                var texture = PIXI.Texture.fromImage('img/game1/'+(selectedTile.theVal + 3)+'.png');


                                texture.width = window.innerWidth*0.1949;
                                texture.height = window.innerWidth*0.1949;


                                selectedTile.setTexture(texture);

                                totlalError ++;

                                if(totlalError< maxError) {
                                    wrClick_sound.play();
                                }

                                if(totlalError >= maxError) {

                                    countDown_sound2.pause();
                                    backGround_sound.pause();

                                    loose_sound.play();

                                    canPick = false;

                                    clearTimeout(gameTimer);

                                    isgamesatrt = false;
                                    isgameover= true;

                                    document.getElementById('introResultdiv').style.display = "block";

                                    introResultstage.addChild(introResultdivrendergraphics);
                                }

                            }

                        }

                    }
                }

            }

        }
        //----------------------------------------------------------------------------------------------------------------------- set 3 seconds masked tile

        setTimeout(function () {

            for(var i =0; i <maskArray.length;i++){

                maskArray[i].tint = 0x000000;
                maskArray[i].alpha = 0.5;

            }

            canPick = true;

            //selectedTile.setTexture(PIXI.Texture.fromImage(selectedTile.theVal-3));

        }, 4000);
    }


    //----------------------------------------------------------------------------------------------------------------------- level1 countdown funciton


    function level1countdownseconds()
    {
        second--;
        if(second>5&&second<=7)
        {
            richText.setStyle(style);
            timer = setTimeout('level1countdownseconds()',1000);
            richText.text = "Level 1";
        }else if(second>3&&second<=5)
        {
            richText.setStyle(style2);
            timer = setTimeout('level1countdownseconds()',1000);
            richText.text = "According to the waste";
        }
        else if (second>0&&second<=3){

            if(second ==3){
                countDown_sound.play();
            }
            richText.setStyle(style);
            richText.text = second;
            timer = setTimeout('level1countdownseconds()',1000);
        }else if (second == 0)
        {
            richText.setStyle(style);
            richText.text = "Go!"
            timer = setTimeout('level1countdownseconds()',1000);
        }
        else if (second < 0)
        {
            // start counting  level1 game tiem ( 60 seconds)
            gameTimer = countdown60secondsgametime('countdown60secondsgametime()',1000);

            // remove count down text
            stage.removeChild(richText);

            // place level 1 game zone
            placeTiles();

            // clear timer
            clearTimeout(timer);
        }
    }

    //----------------------------------------------------------------------------------------------------------------------- level3 countdown

    function countdown3seconds()
    {

        second2--;
        if(second2>7&&second2<=9)
        {
            richText.setStyle(style);
            richText.text = 'Level 2';
            timer2 = setTimeout('countdown3seconds()',1000);//调用自身实现

        }
        else if(second2>5&&second2<=7)
        {
            richText.setStyle(style);
            richText.text = second2;
            timer2 = setTimeout('countdown3seconds()',1000);//调用自身实现

        } else if(second2>0&&second2<=3)
        {
            richText.setStyle(style);
            richText.text = second2;
            timer2 = setTimeout('countdown3seconds()',1000);//调用自身实现

        }
        else if (second2 == 0)
        {
            richText.setStyle(style);
            richText.text = "Go!"
            timer2 = setTimeout('countdown3seconds()',1000);//调用自身实现

        }else if(second2<0){
            gameTime = 60;
            richText.text = 60;
            stage.removeChild(richText);
            gameTimer = countdown60secondsgametime('countdown60secondsgametime()',1000);
            newRound = true;
//			placeTiles2();
            renderer.render(stage);
            clearTimeout(timer2);
        }
    }


    //----------------------------------------------------------------------------------------------------------------------- this is game time timer

    function countdown60secondsgametime() {

        gameTime--;

        if(gameTime>=0)
        {
            countingText.text = 'Time Left: '+gameTime;

            if (gameTime == 0)  // if a level game time up, go into next level
            {
                if(level ==1){
                richText.text = "Next Level"     // show next level 1 second
                }else if (level ==2){
                    richText.text = "Time UP"
                }
                stage.addChild(richText);
                canPick = false;                   // do not allow to pick color block anymore
            }
            renderer.render(stage);
            gameTimer = setTimeout('countdown60secondsgametime()',1000);
        }
        if(gameTime == -1 )
        {

            if(level==1){
            stage.removeChildren(3, stage.children.length);
            isgamesatrt = false;              // stop game
            newRound = false;                 // reset newRound
            newlevel=true;                     // reset new level

            canPick=false;
            round = 0;
            totlalError = 0;
            selectedRightColor =0;


            level++;                            // next level
            document.getElementById('introResultdiv').style.display = "block"; // show introResultdiv Div
                intropage = PIXI.Sprite.fromImage("img/game1/game1level2intro.png");

            intropage.alpha= 0;

            introResultstage.addChild(introResultdivrendergraphics);  // add animation engine

            intropageshow = true;

//            startPage.scale.set(window.innerWidth/startPage.width);


            }else if (level ==2 ){

                backGround_sound.pause();
                animationcount = 0;
//                stage.removeChildren(0, stage.children.length);
                isgamesatrt = false;              // stop game
                newRound = false;                 // reset newRound
                newlevel=true;                     // reset new level

                round = 0;
                totlalError = 0;
                selectedRightColor =0;


                level=1;   //reset level
                document.getElementById('introResultdiv').style.display = "block"; // show introResultdiv Div
                introResultstage.addChild(introResultdivrendergraphics);
                isgamesatrt = false;
                isgameover = true;

            }
            clearTimeout(gameTimer);
        }

    }

    //---------------------------------------------    start page event
    startPage.mousedown = startPage.touchstart = function(data){
        if(level==1) {
            // display level1 countdown music
                countDown_sound.play();
        }else if(level ==2){

            isgamesatrt = true;
            countDown_sound2.play();
            // palce second level sound
        }
        introResultdivrendergraphics.clear();
        introResultstage.removeChildren(0,introResultstage.children.length);
        introResultdivrenderer.render(introResultstage)
        // hide the introResultdiv DIV
        document.getElementById('introResultdiv').style.display="none";
        // start game
        isgamesatrt = true;

    }

    animate();
    function animate() {

        if(!isgamesatrt){  // if game is not stat or gameover

            if(intropageshow){  // if show intropageshow

                    if( Math.sin(animationcount)* 2000<=900) {  // before intropage micro animation
                        // satr micro animation
                        intropage.alpha += 0.2;
                        introResultdivrendergraphics.clear();
                        introResultdivrendergraphics.beginFill(0x0598f2, 0.85);
                        introResultdivrendergraphics.drawCircle(-20, 0, Math.abs(Math.sin(animationcount)) * 1500);
                        introResultdivrendergraphics.endFill();
                        introResultdivrendergraphics.beginFill(0x00306f, 0.95);
                        introResultdivrendergraphics.drawCircle(window.innerWidth + 150, window.innerHeight - 200, Math.abs(Math.sin(animationcount * 1.5)) * 2600);
                        introResultdivrendergraphics.endFill();
                        introResultdivrenderer.render(introResultstage);
                        animationcount+=0.1;
                    }else  // after the microanimation thow intropage
                    {
                       // end micro anmimation add game intro page

                        intropage.anchor.set(0.5);
                        intropage.x = window.innerWidth/2;
                        intropage.y = window.innerHeight/2;
                        intropage.scale.set((window.innerHeight/intropage.height));


//                        intropage.width = (window.innerWidth/intropage.width)*0.8;

                        intropage.buttonMode = true;
                        intropage.interactive = true;

                        // add ingtropage click event

                        intropage.mousedown = intropage.touchstart = function (data) {

                            if(level ==1) // if  level1 paly backgrould music
                            {
                                backGround_sound.play();
                            }
                            // remove this intro pic
                            introResultstage.removeChild(intropage);
                            introResultdivrenderer.render(introResultstage);
                            // show start page
                            isstartshow = true;
                        }

                        introResultstage.addChild(intropage);

                        introResultdivrenderer.render(introResultstage);
                        animationcount = 0;
                        intropageshow= false;
                    }
               }

            if(!intropageshow&&isstartshow)   // finish show intropage then show start screen
              {
                    if (Math.sin(animationcount*1.5) * 2000 < 1200) {  // before startpage show  micro animation first
                        introResultdivrendergraphics.clear();
                        introResultdivrendergraphics.beginFill(0x0598f2, 0.85);
                        introResultdivrendergraphics.drawCircle(-100, 0, Math.sin(animationcount*2.5) * 1400);
                        introResultdivrendergraphics.endFill();
                        introResultdivrendergraphics.beginFill(0x00306f, 0.95);
                        introResultdivrendergraphics.drawCircle(window.innerWidth + 150, window.innerHeight - 200, Math.sin(animationcount * 1.6) * 1200);
                        //							introResultdivrendergraphics.drawCircle(window.innerWidth/2, window.innerHeight/2+190,Math.cos(circlecount)* 100);
                        introResultdivrendergraphics.endFill();
                        introResultdivrenderer.render(introResultstage);
                        animationcount += 0.2;
                    } else {   // after the microanimation thow startpage

                        //reset animation count
                        animationcount = 0;

                        startPage.anchor.set(0.5);
                        startPage.x = window.innerWidth/2;
                        startPage.y = window.innerHeight/2;


                        if(level==1){
                          startPage.scale.set(window.innerWidth*0.8/startPage.width);
                        }
                        startPage.buttonMode = true;
                        startPage.interactive = true;
                        introResultstage.addChild(startPage);
                        introResultdivrenderer.render(introResultstage);
                        isstartshow= false;
                    }
            }

            if (!intropageshow&&!isstartshow&&isgameover)  // shwo game over screen
            {
                // shwo micro animation

                if( Math.sin(animationcount)<=0.4) {

                    introResultdivrendergraphics.clear();
                    introResultdivrendergraphics.beginFill(0x0598f2, 0.85);
//								introResultdivrendergraphics.drawCircle(window.innerWidth/2,window.innerHeight/2, Math.sin(circlecount)* 2000);
                    introResultdivrendergraphics.drawCircle(window.innerWidth/2, -80, Math.abs(Math.sin(animationcount)) * 1800);
                    introResultdivrendergraphics.endFill();
                    introResultdivrendergraphics.beginFill(0x00306f, 0.95);
                    introResultdivrendergraphics.drawCircle(window.innerWidth/2, window.innerHeight, Math.abs(Math.sin(animationcount * 1.5)) * 1800);
                    //							introResultdivrendergraphics.drawCircle(window.innerWidth/2, window.innerHeight/2+190,Math.cos(circlecount)* 100);
                    introResultdivrendergraphics.endFill();

                    introResultdivrenderer.render(introResultstage);
                    animationcount += 0.2;
                }else{
                    introResultstage.addChild(try_again_btn);
                    introResultstage.addChild(back_btn);

                    isgameover = false;

                    var gameoveText = new PIXI.Text('Game Over!',gameoverStyle);
                    var resluText = new PIXI.Text('Your final score is: '+ totalScore,style2);

                    setTimeout(function () {


//                        gameoveText.anchor.set(0.5);
                        gameoveText.scale.set(window.innerWidth*0.6/gameoveText.width);

                        gameoveText.y = window.innerHeight/8;
                        gameoveText.x = (window.innerWidth - gameoveText.width)/2;

                        introResultstage.addChild(gameoveText);
                        introResultdivrenderer.render(introResultstage);
                        //selectedTile.setTexture(PIXI.Texture.fromImage(selectedTile.theVal-3));

                    }, 1000);

                    setTimeout(function () {


                        resluText.anchor.set(0.5);

                        resluText.scale.set(window.innerWidth*0.6/resluText.width);
                        resluText.y = gameoveText.y+gameoveText.height+window.innerHeight/8;
                        resluText.x = window.innerWidth/2;

                        introResultstage.addChild(resluText);
                        introResultdivrenderer.render(introResultstage);
                        //selectedTile.setTexture(PIXI.Texture.fromImage(selectedTile.theVal-3));

                    }, 2000);


                }
            }
        }
        else if(isgamesatrt){

            if (level == 1) {
                if(newlevel){

                    newRound = false;
                    newlevel = false;
                    timer = level1countdownseconds('level1countdownseconds()',1000);

                }else{

              if (newRound) {
                        placeTiles();
                        renderer.render(stage);
                    }

                }
            }else if (level==2){


                if(newlevel){

                    newRound = false;
                    stage.addChild(richText);
                    newlevel = false;
                    timer2 = countdown3seconds('countdown3seconds()',1000);

                }else{
                    if (newRound) {

                        placeTiles2();
                        renderer.render(stage);

                    }
                }
            }
        }

        circlecount+=0.1;
        bggraph.clear();

//        bggraph.beginFill(0x74d0f8,(0.2 + Math.cos(circlecount)*0.2));
////                            bggraph.moveTo(window.innerWidth/2,window.innerHeight/2+200);
//        bggraph.drawCircle(window.innerWidth/2, window.innerHeight/2+190, 430+ Math.cos(circlecount) *10);
//        bggraph.endFill();
//
//        bggraph.beginFill(0x0098db,0.4);
//        bggraph.drawCircle(window.innerWidth/2, window.innerHeight/2+190, 360+ Math.cos(circlecount)* 6);
//        bggraph.endFill();
//
//        bggraph.beginFill(0x0098db,0.8);
//        bggraph.drawCircle(window.innerWidth/2, window.innerHeight/2+190, 330+ Math.cos(circlecount)* 3);
//        bggraph.endFill();

        // just for fun, let's rotate mr rabbit a little
        coinLogoPic.rotation += 0.002;

        coinLogoPic2.rotation -= 0.002;

        // render the stage
        bgrenderer.render(bgstage);

//							if (count >= 400) {
//								count = 0;
//							} else {
//								count += 0.05;
//							}
//							// update the text with a new string
//							countingText.text = 'Time Left: ' + Math.floor(count);


//							wastePic.scale.x = Math.sin(count);
//							wastePic.scale.y = Math.sin(count);

//							bgPic.rotation += 0.01;


        rottimes++;

        if((rottimes%20)<0){


            wastePic.rotation  += 0.02;
        }else if(rottimes%20>=0){

            if((rottimes%20) ==0){

                isReverse = !isReverse;
            }

            if(isReverse){
                wastePic.rotation  -= 0.02;

            }else if (!isReverse){
                wastePic.rotation  += 0.02;

            }

        }


        renderer.render(stage);
        requestAnimationFrame(animate);

    }

</script>

</body>
</html>
