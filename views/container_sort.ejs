<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" />

    <title>pixi.js example 1</title>

    <style>
        *{margin: 0;padding: 0;}
        #container {
            position: absolute;
            height: 100%;
            width: 100%;
        }
        #output {
            width: 100%;
            height: 100%;
        }
        .color{
            width: 120px;
            height: 20px;
            margin: 0 auto;
            position: fixed;
            left: 50%;
            margin-left: -60px;

            bottom: 20px;
        }
        .color li{
            float: left;
            margin: 0 5px;
            width: 20px;
            height: 20px;
            background: #ccc;
            box-shadow: 0 0 4px #FFF;
            list-style: none;
            cursor: pointer;
        }
        .color li:nth-child(1){
            background: #002c4a;
        }
        .color li:nth-child(2){
            background: #35ac03;
        }
        .color li:nth-child(3){
            background: #ac0908;
        }
        .color li:nth-child(4){
            background: #18bbff;
        }

    </style>


    <style>
        @media (device-width:375px) and (-webkit-min-device-pixel-ratio:3.0){/* ����iphone6 plus */
            body {
                margin: 0;
                padding: 0;
                /*background-repeat: no-repeat;*/
                /*background-image: url("images/game/bg1242-2280.png");*/


            }
        }

    </style>

    <script src="public/js/pixi.js"></script>
    <script src="public/js/vector.js"></script>
    <script src="public/js/jquery.js"></script>

<!--  --------------------------------------- common dynaic backgoround set up  fro container Div ---------------------------------- -->
    <script>
//        $(function(){
//            var victor = new Victor("container", "output");
//            var theme = [
//                ["#002c4a", "#005584"],
//                ["#35ac03", "#3f4303"],
//                ["#ac0908", "#cd5726"],
//                ["#18bbff", "#00486b"]
//            ]
//            $(".color li").each(function(index, val) {
//                var color = theme[index];
//                $(this).mouseover(function(){
//                    victor(color).set();
//                })
//            });
//        });
    </script>

    <script>
        window.onload=function(){

//            alert(document.documentElement.clientHeight);
            if(document.documentElement.scrollHeight <= document.documentElement.clientHeight) {
                bodyTag = document.getElementsByTagName('body')[0];
                bodyTag.style.height = document.documentElement.clientWidth / screen.width * screen.height + 'px';
            }
            setTimeout(function() {
                window.scrollTo(0, 1)
            }, 0);
        };
    </script>
</head>
<body style="background-color:  #005a9c;">
<div style="background-color: #3498db">
    <div id="container" ><div id="output"></div></div>
</div>
<div style="position: relative;">
    <div id ="bgdiv" style="position: absolute; width:100%;height:100%"></div>
    <div id = 'gamediv'style="position: absolute;"></div>
    <div id = 'introResultdiv'style="position: absolute;background-color: #f1c40f; opacity: 0.95; margin:0px; padding: 0px; border: 0px "></div>
</div>
<script>

    //------------------------------------------------- tex tyle ----------------------------------------------------------------

    var gameoverStyle = {
        font : 'bold italic 200px Arial',
        fill : '#e4007f',
        stroke : '#ffcee9',
        strokeThickness : 10,
        dropShadow : true,
        dropShadowColor : '#000000',
        dropShadowAngle : Math.PI / 6,
        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 540
    };

    var style2 = {
        font : 'bold italic 100px Arial',
        fill : '#F7EDCA',
        stroke : '#4a1850',
        strokeThickness : 5,
//        dropShadow : true,
//        dropShadowColor : '#000000',
//        dropShadowAngle : Math.PI / 6,
//        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 640
    };

    var introstyle = {
        font : 'bold italic 60px Arial',
        fill : '#F7EDCA',
//        stroke : '#4a1850',
//        strokeThickness : 5,
//        dropShadow : true,
//        dropShadowColor : '#000000',
//        dropShadowAngle : Math.PI / 6,
//        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 440
    };


    var style = {
        font : 'bold italic 200px Arial',
        fill : '#F7EDCA',
        stroke : '#4a1850',
        strokeThickness : 5,
//        dropShadow : true,
//        dropShadowColor : '#000000',
//        dropShadowAngle : Math.PI / 6,
//        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 440
    };


 //------------------------------------------------- load resourcd ----------------------------------------------------------------


    var isloadfinish = false;

    // all resource will be loaded. the resource path will be kept in game1 json
    PIXI.loader.add("public/jsons/game1.json").load(finishLoad);

    function finishLoad(){    // if finish laod rsource  set isloadfinish true intro page show.
        //some function after the web has been loaded

        isloadfinish = true;
    }


    //------------------------------------------------- game parameters set up ----------------------------------------------------------------


    var offset = 50;

    // Basic settings
    var objectNumber = 3;
    var objectWidth = 512
            ;
    // whether show the start page
    var isstartshow = false;
    // whether the game is start
    var isgamesatrt = false;
    // initially if is game doest not stat the into page will be displayed
    var intropageshow = true;
    // for micro animation loop control
    var animationcount =0;
    // set fist leve game time. 60 seconds
    var gameTime = 60;
    var isgameover = false;
    var newlevel  = true;
    var level = 1;
    var newRound = false;

    var round = 0;
//    var totalround = 3;
    var totalScore =0;
    var totlalError  =0;
    var maxError=3;
    var canPick = false;

    // level1 start countdown seconds
    var second= 4;
    var timer;
    var circlecount = 0;
    var gameTimer;
    // level2 start countdown seconds
    var second2 = 4;
    var timer2;

    var selectedRightColor = 0;
    var totalRightColor = 3;  // the number of level 1 right color in each round
    var totalRightColor2 = 3;   // the number of level 2 right color in each round


    var rottimes = -20; // for waste pic animation
    var isReverse = false;  // for waste pic animation



    //------------------------------------------------- music set up ----------------------------------------------------------------

    var backGround_sound = new Audio("public/sounds/bgmusic.mp3");
    var backGround_sound = new Audio("public/sounds/bgmusic.mp3");
    backGround_sound.loop = true;
    var levelUp_sound=  new Audio("public/sounds/levelUp.mp3");
    var newRound_sound =  new Audio("public/sounds/newRound.mp3");
    var rtClick_sound = new Audio("public/sounds/rtClick.mp3");
    //    var wrClick_sound = new Audio("public/sounds/wrClick.mp3");
    var wrClick_sound = new Audio("public/sounds/wrClick.mp3");
    var gameOver_sound = new Audio("public/sounds/gameover.mp3");
    var loose_sound = new Audio("public/sounds/lose.mp3");
    var countDown_sound = new Audio("public/sounds/cound_down1.mp3");
    //last game countdown sound
    var countDown_sound2 = new Audio("public/sounds/cound_down3.mp3");


    //----------------------------------------------  introResultdiv  basic set up -----------------------------------------------------
    // for introResultdiv container
    var introResultstage = new PIXI.Container();
    // for introResultdiv animation
    var  introResultdivrendergraphics = new PIXI.Graphics();
    // for introResultdiv render
    var introResultdivrenderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight,{ transparent: true});
    introResultstage.addChild(introResultdivrendergraphics);
    document.getElementById('introResultdiv').appendChild(introResultdivrenderer.view);
    introResultdivrenderer.render(introResultstage);


    //----------------------------------------------- bgdiv basic set up  for background animation -----------------------------------------
    var bgstage = new PIXI.Container();
    var bgrenderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight,{ transparent: true });
    //	var bgrenderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight);

    bgrenderer.backgroundColor = 0x005a9c;

    document.getElementById('bgdiv').appendChild(bgrenderer.view);

    // 2 background coin pic. They are not necessary
    var coinLogoPic = PIXI.Sprite.fromImage("public/imgs/game1/logo-nobg.png");
    var coinLogoPic2 = PIXI.Sprite.fromImage("public/imgs/game1/logo-nobg.png");
    var s_bg = PIXI.Sprite.fromImage("public/imgs/s_bg.png");



    var try_again_btn_up_texture = PIXI.Texture.fromImage('public/imgs/try_again_up.png');
    var try_again_btn_down_texture = PIXI.Texture.fromImage('public/imgs/try_again_down.png');
    var back_btn_up_texture = PIXI.Texture.fromImage('public/imgs/back_up.png');
    var back_btn_down_texture = PIXI.Texture.fromImage('public/imgs/back_down.png');


    PIXI.loader.add("try_again_btn","public/imgs/try_again_up.png");

    PIXI.loader.add("back_btn","public/imgs/back_up.png");

    var try_again_btn = new PIXI.Sprite(try_again_btn_up_texture);
    //    var try_again_down  = PIXI.Sprite.fromImage("public/imgs/try_again_down.png");

    try_again_btn.buttonMode = true;
    try_again_btn.interactive = true;
    try_again_btn.anchor.set(0.5);


    try_again_btn.mousedown = try_again_btn.touchstart = function(data){
        rtClick_sound.play();
        try_again_btn.texture = try_again_btn_down_texture;
        introResultdivrenderer.render(introResultstage);
//        try_again_btn.tint = 0x000000;
//        try_again_btn.alpah = 0.5;
        location.href='/container_sort';

    }

    var back_btn =  new PIXI.Sprite(back_btn_up_texture);

    back_btn.buttonMode = true;
    back_btn.interactive = true;

    back_btn.anchor.set(0.5);




    back_btn.mousedown = back_btn.touchstart = function(data){
        rtClick_sound.play();
        back_btn.texture = back_btn_down_texture;
        introResultdivrenderer.render(introResultstage);
        location.href='/game';

    }
//    var back_down = PIXI.Sprite.fromImage("public/imgs/back_down.png");



    coinLogoPic2.anchor.set(0.5);
    coinLogoPic.anchor.set(0.5);
    s_bg.anchor.set(0.5);
    s_bg.alpha =0.8;

    s_bg.position.x = window.innerWidth/2;
    s_bg.position.y = window.innerHeight/2+190;

    s_bg.scale.set(0.75);

    coinLogoPic.position.x = window.innerWidth/2+700;
    coinLogoPic.position.y = window.innerHeight/2+190;

    coinLogoPic.scale.set(0.9);
    coinLogoPic2.position.x = -200;
    coinLogoPic2.position.y = window.innerHeight/2+190;

    coinLogoPic2.scale.set(0.9);

    bgstage.addChild(coinLogoPic);
    bgstage.addChild(coinLogoPic2);


    // used for bg micro animation
    var bggraph = new PIXI.Graphics();
    bgstage.addChild(bggraph);

    bgrenderer.render(bgstage);

//---------------------------------------------------------------------------- waste pic

// the total waste types&&icons
    var wasteCollection  =[[0,'public/imgs/game1/plastic_bottle_empty.png','Plastic Bottle'],[1,'public/imgs/game1/plastic_bag.png','Plastic Bag'],[2,'public/imgs/game1/appple_core.png','Apple Core']]


    //---------------------------------------------------------------------------- random the waste the order
    var wasteCollectionOrder  = new Array(wasteCollection.length);

    for(var i =0;i<wasteCollection.length; i++)
    {
        wasteCollectionOrder[i] = i;
    }
    // shuffle the waste order
    for(i=0;i<48;i++){
        var from = Math.floor(Math.random()*3);
        var to = Math.floor(Math.random()*3);
        var tmp = wasteCollectionOrder[from];
        wasteCollectionOrder[from]=wasteCollectionOrder[to];
        wasteCollectionOrder[to]=tmp;
    }

    var indexpic = 0;
    var wastePic = PIXI.Sprite.fromImage(wasteCollection[wasteCollectionOrder[round]][1]); // waste pic must be add here because the micro animation will use wastePic so it can not be decleared in  placeTiles()
    var wasteLabel = new PIXI.Text(wasteCollection[indexpic][2],{font : '80px Constantia', fill : 0xFFFFFF, align : 'center center'});  //  if a micro animition will be added into this element is must be decleared outside placeTiles()

    //------------------------------------------------------------------------------
    //------------------------------------------------------------------------------
    //------------------------------------------------------------------------------
    //----------------------- main game screen drawing -----------------------------
    //------------------------------------------------------------------------------
    //------------------------------------------------------------------------------
    //------------------------------------------------------------------------------

    var stage = new PIXI.Container();
    var graphics = new PIXI.Graphics();

    var renderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight,{ transparent: true })
    //    renderer.backgroundColor = 0x005a9c;
    document.getElementById('gamediv').appendChild(renderer.view);

    stage.addChild(graphics);


 //---------------------------------- game title board --------------------------------------------
    var bgStarX = 0;
    var bgStarY = 0;

    var gameTileBoardHeight = window.innerHeight/4.5;
    var gameTileBoardWidth = window.innerWidth/1.06;
    bgStarX = (window.innerWidth- gameTileBoardWidth)/2;

        graphics.moveTo(bgStarX, bgStarY);
        graphics.beginFill(0x002964,0.7);
        graphics.drawRect(bgStarX , bgStarY, gameTileBoardWidth, gameTileBoardHeight);
        graphics.endFill();

        var gameNameLabel = new PIXI.Text('Quick Sort', {font : '95px Constantia', fill : 0xFFFFFF, align : 'center'});
        gameNameLabel.position.x = bgStarX*1.9 ;
        gameNameLabel.position.y = gameTileBoardHeight/5;




    //------------------------------------------------------------------------------ time&&score bar

    var timescoreBarHeight = gameTileBoardHeight /3;
    var timescoreBarWidth = gameTileBoardWidth  *0.7;

    var timescoreBarX = bgStarX;
    var timescoreBarY = gameTileBoardHeight - timescoreBarHeight;



    graphics.moveTo(timescoreBarX, timescoreBarY);
    graphics.beginFill(0x2097e2,0.9);
    graphics.drawRect(timescoreBarX, timescoreBarY,timescoreBarWidth,timescoreBarHeight);
    graphics.endFill();


    var scoreLabel = new PIXI.Text('Score:',{font : '40px Arial', fill : 0xFFFFFF, align : 'center'});
    scoreLabel.anchor.y =0.5;
    var scoreTextLabel = new PIXI.Text(totalScore, {font : '40px Arial', fill : 0xFFFFFF, align : 'center'});
    scoreTextLabel.anchor.y =0.5;

    var timeLabel = new PIXI.Text('Time:',{font : '40px Arial', fill : 0xFFFFFF, align : 'center'});
    timeLabel.anchor.y =0.5;
    var timeTextLabel = new PIXI.Text(gameTime,{font : '40px Arial', fill : 0xFFFFFF, align : 'center'});
    timeTextLabel.anchor.y =0.5;

    timeLabel.position.x =  timescoreBarX*1.8;
    timeLabel.position.y = timescoreBarY +timescoreBarHeight/2;

    timeTextLabel.position.x = timeLabel.position.x + timeLabel.width+10;
    timeTextLabel.position.y = timescoreBarY +timescoreBarHeight/2;

    scoreLabel.position.x = timescoreBarX+timescoreBarWidth/1.9;
    scoreLabel.position.y = timescoreBarY +timescoreBarHeight/2;
    scoreTextLabel.position.x =  scoreLabel.position.x +scoreLabel.width+20 ;
    scoreTextLabel.position.y = timescoreBarY +timescoreBarHeight/2;


    //------------------------------------------------------------------------------ waste bin board


    var wasteBinBoardX = bgStarX - gameTileBoardWidth /80;
    var wasteBinBoardY = gameTileBoardHeight;
    var wasteBinBoardHeight = gameTileBoardHeight;
    var wasteBinBoardWidth = gameTileBoardWidth *1.025;


    graphics.moveTo(wasteBinBoardX, wasteBinBoardX);
    graphics.beginFill(0x00215b,0.8);
    graphics.drawRect(wasteBinBoardX, gameTileBoardHeight,wasteBinBoardWidth,wasteBinBoardHeight);
    graphics.endFill();







    //------------------------------------------------------------------------------ waste  board

    var wasteBoardHeight = wasteBinBoardHeight;
    var wasteBoardWidth = gameTileBoardWidth;
    var wasteBoardX = bgStarX;
    var wasteBoardY =  window.innerHeight - wasteBinBoardHeight;

    graphics.moveTo(wasteBoardX, wasteBoardY);
    graphics.beginFill(0x00215b,0.9);
    graphics.drawRect(wasteBoardX, wasteBoardY,wasteBoardWidth,wasteBoardHeight );
    graphics.endFill();


    var wastebgWidth
    var wastBgHeight

    //------------------------------------------------------------------------------ center  board

    var centerBoarHeight = wasteBoardY - wasteBinBoardY-wasteBinBoardHeight;
    var centerBoarWidth  = gameTileBoardWidth*1;
    var centerBoardX = bgStarX+gameTileBoardWidth*0.0;
    var centerBoardY = gameTileBoardHeight+wasteBinBoardHeight;

    graphics.moveTo(centerBoardX, centerBoardY);
    graphics.beginFill(0x00215b,0.5);
    graphics.drawRect(centerBoardX, centerBoardY,centerBoarWidth,centerBoarHeight );
    graphics.endFill();


    //---------------------------------- game element set up -------------------------------


    // the selected waste value
   var matchVal = 0;

    var resourcePath = "public/imgs/";

    var textureArray = [['recycle', resourcePath+'recycle-bin.png'], ['waste', resourcePath+'waste-bin.png'], ['organic', resourcePath+'oganic-bin.png']];


    var rubbishArray = [];
    var rubbishBin = [];



    // console.log(rubbishBin.length);
//    objectWidth = (rubbishBin.length > 0) ? (objectWidth*rubbishBin[0].scale.x) : objectWidth;
//
//    var totalWidth = objectNumber*objectWidth+(objectNumber-1)*offset;

    // console.log(window.innerWidth+","+totalWidth);

    // Position of the inside window
    var startX = wasteBinBoardX;
    var startY = wasteBinBoardY;

    var binCenter_X = 0;
    var binCenter_Y = 0;

    // Initial position
//    graphics.moveTo(startX, startY);
//    graphics.beginFill(0x00235d);
//    graphics.drawRect(0, startY/2-objectWidth, window.innerWidth, window.innerHeight/7, 0);
//    graphics.endFill();

    var wastebinoffset =0;
    var rubbishoffset=0;
    var rubbishbinWidth = 0;
    var rubbishWidth = 0;
    var rbStart_X = startX;
//    var rbStart_Y = window.innerHeight - rubbishWidth*4;
    var rbNumber = 3;

    // origianl waste type value array   0 recycle 1 waste
    var rubbishVal = [0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2];
    var rubbishbinVal = [0,1,2];

    var maxLength;



    //----------------------------------------------------------------------------------------------------------------------- set countdown/commn text

    var richText = new PIXI.Text('',style);
    richText.anchor.x = 0.5;
    richText.anchor.y = 0.5;
    richText.x = window.innerWidth/2;
    richText.y = window.innerHeight/1.75;
    richText.alpha = 0.9;


    // loading rubbishBin icons
    for (var i = 0; i < textureArray.length; i++) {
        PIXI.loader.add(textureArray[i][0], textureArray[i][1]);
        rubbishBin.push(new PIXI.Sprite.fromImage(textureArray[i][1]));
        rubbishBin[i].scale.x = rubbishBin[i].scale.y = 0.64;
        rubbishBin[i].theVal = rubbishbinVal[i];
        rubbishBin[i].anchor.y =0.5;
        rubbishBin[i].anchor.x =0.5;

    };




    for(var i = 1 ; i <= 25; i++)
    {
        PIXI.loader.add("rubbish"+i, resourcePath+"rubbish"+i+".png");

        for (var i = 1; i <= 25; i++) {
            rubbishArray.push(new PIXI.Sprite.fromImage(resourcePath+"rubbish"+i+".png"));
            rubbishArray[i-1].anchor.y =0.3;
            rubbishArray[i-1].anchor.x =0.5;
            rubbishArray[i-1].scale.x = 0.38;
            rubbishArray[i-1].scale.y = 0.38;


            rubbishArray[i-1].interactive = true;
            rubbishArray[i-1].theVal = rubbishVal[i-1];
            rubbishArray[i-1]
            // events for drag start
                    .on('mousedown', onDragStart)
                    .on('touchstart', onDragStart)
                    // events for drag end
                    .on('mouseup', onDragEnd)
                    .on('mouseupoutside', onDragEnd)
                    .on('touchend', onDragEnd)
                    .on('touchendoutside', onDragEnd)
                    // events for drag move
                    .on('mousemove', onDragMove)
                    .on('touchmove', onDragMove);

        };
    }


    stage.interactive = true;

    PIXI.loader.load(function (loader, resources) {

        stage.addChild(graphics);
//    stage.addChild(totalScoreText);
        //    stage.addChild(countingText);

        // richText should be added at last so as to be displayed on teh
        stage.addChild(richText);
        stage.addChild(gameNameLabel);
        stage.addChild(timeLabel);
        stage.addChild(timeTextLabel);
        stage.addChild(scoreTextLabel);
        stage.addChild(scoreLabel);




            rubbishbinWidth = rubbishBin[0].width;

            wastebinoffset = (wasteBinBoardWidth - (3* rubbishbinWidth))/4;




            maxLength = rubbishbinWidth*0.4;

            rubbishWidth = rubbishArray[0].width;
            rubbishoffset = (wasteBoardWidth - (3* rubbishWidth))/4;

        console.log('rubbishbinWidth '+rubbishbinWidth);
        console.log('rubbishoffset '+rubbishoffset);


        // shuffle the rubbish icon array

        shuffleRubbishIconArray();

        try_again_btn.scale.set(1.2);
        back_btn.scale.set(1.2);
        try_again_btn.position.x = window.innerWidth/2 ;
        try_again_btn.position.y =window.innerHeight*0.8;

        back_btn.position.x = window.innerWidth/2 ;
        back_btn.position.y =try_again_btn.position.y+try_again_btn.height+50;


    });


    // shuffle the rubbish icon array
    function shuffleRubbishIconArray (){
        for(i=0;i<75;i++){
            var from = Math.floor(Math.random()*25);
            var to = Math.floor(Math.random()*25);
            var tmp = rubbishArray[from];
            rubbishArray[from]=rubbishArray[to];
            rubbishArray[to]=tmp;
        }
    }


    // shuffle the rubbish bin array
    function shuffleRubbishBinArray (){
        for(i=0;i<9;i++){
            var from = Math.floor(Math.random()*3);
            var to = Math.floor(Math.random()*3);
            var tmp = rubbishBin[from];
            rubbishBin[from]=rubbishBin[to];
            rubbishBin[to]=tmp;
        }
    }
    //------------------------------------------------------------------------------
    //------------------------   level1 main funciotn  -----------------------------
    //------------------------------------------------------------------------------

    function placeTiles(){
        newRound = false;

    //        console.log(stage);
    //        console.table(stage);
        // 0 recycle 1 waste  2 organic


        for (var i = 0; i < textureArray.length; i++) {


            rubbishBin[i].position.x = wastebinoffset +startX+(i+1)*(rubbishbinWidth/2)+i*rubbishbinWidth;

            rubbishBin[i].position.y = wasteBinBoardY+wasteBinBoardHeight/2;

            console.log(  rubbishBin[i].position.x);
            console.log(  rubbishBin[i].position.y);

            // console.log(rubbishBin[i].position.x);
            stage.addChild(rubbishBin[i]);
        };


        var indexfrom = (round*3);
        var indexto = (round*3)+3;

        for (var i = indexfrom; i<indexto; i++) {
            // 0 recycle 1 waste  2 organic
            rubbishArray[i].position.x = wastebinoffset +startX+(i%3+1)*(rubbishbinWidth/2)+(i%3)*rubbishbinWidth;
            rubbishArray[i].position.y = wasteBoardY + wasteBoardHeight / 2.4;
            stage.addChild(rubbishArray[i]);

//        maxLength = Math.sqrt(2*Math.pow(rubbishWidth*0.5,2));
        }

    }

    //------------------------------------------------------------------------------
    //------------------------   level2 main funciotn  -----------------------------
    //------------------------------------------------------------------------------

    function placeTiles2(){

        shuffleRubbishBinArray();

        newRound = false;

//        for(i=0;i<9;i++){
//            var from = Math.floor(Math.random()*25);
//            var to = Math.floor(Math.random()*25);
//            var tmp = rubbishBin[from];
//            rubbishBin[from]=rubbishBin[to];
//            rubbishBin[to]=tmp;
//        }




        //        console.log(stage);
        //        console.table(stage);
        // 0 recycle 1 waste  2 organic


        for (var i = 0; i < textureArray.length; i++) {

            rubbishBin[i].position.x = wastebinoffset +startX+(i+1)*(rubbishbinWidth/2)+i*rubbishbinWidth;

            rubbishBin[i].position.y = wasteBinBoardY+wasteBinBoardHeight/2;

            console.log(  rubbishBin[i].position.x);
            console.log(  rubbishBin[i].position.y);

            // console.log(rubbishBin[i].position.x);
            stage.addChild(rubbishBin[i]);
        };


        var indexfrom = (round*3);
        var indexto = (round*3)+3;

        for (var i = indexfrom; i<indexto; i++) {
            // 0 recycle 1 waste  2 organic
            rubbishArray[i].position.x = wastebinoffset +startX+(i%3+1)*(rubbishbinWidth/2)+(i%3)*rubbishbinWidth;
            rubbishArray[i].position.y = wasteBoardY + wasteBoardHeight / 2.4;
            stage.addChild(rubbishArray[i]);

//        maxLength = Math.sqrt(2*Math.pow(rubbishWidth*0.5,2));
        }

    }

    function onDragStart(event)
    {
        // store a reference to the data
        // the reason for this is because of multitouch
        // we want to track the movement of this particular touch
        findMatchBinCenterPosition(this.theVal);
        this.data = event.data;
        this.alpha = 0.5;
        this.dragging = true;
    }


    // find the ritht bin
    function findMatchBinCenterPosition(value){

        for (var i =0;i<rubbishBin.length;i++){

            if(value == rubbishBin[i].theVal){

                console.log('rubishbin:'+i);
                binCenter_X = rubbishBin[i].position.x;
                binCenter_Y = rubbishBin[i].position.y;
            }
        }
    }


    function onDragEnd()
    {



        this.alpha = 1;



        var distance = Math.sqrt((Math.pow(this.position.x - binCenter_X, 2))+(Math.pow(this.position.y - binCenter_Y, 2)));

        cIndex = rubbishArray.indexOf(this);

//        console.log("selectedRightColor :"+selectedRightColor   );

        if(distance <= maxLength){


           selectedRightColor++;
            if(selectedRightColor<totalRightColor){
                rtClick_sound.play();
                stage.removeChild(rubbishArray[cIndex]);
            }else if(selectedRightColor >= totalRightColor){
                newRound_sound.play();
                newRound = true;
                selectedRightColor = 0;
                stage.removeChildren(6,stage.children.length);
                round++;
            }
//            alert(totalScore);
            totalScore+=20;

            scoreTextLabel.text = totalScore;

            if(round>=8){
                shuffleRubbishIconArray();
                round =0;
            }

        }else {

            wrClick_sound.play();
            rubbishArray[cIndex].position.x =  wastebinoffset +startX+((cIndex%3)+1)*(rubbishbinWidth/2)+(cIndex%3)*rubbishbinWidth;
            rubbishArray[cIndex].position.y =  wasteBoardY+wasteBoardHeight/2.4;

        }
        this.dragging = false;

        // set the interaction data to null
        this.data = null;
    }

    function onDragMove()
    {
        if (this.dragging)
        {
            var newPosition = this.data.getLocalPosition(this.parent);
            this.position.x = newPosition.x-this.width/2;
            this.position.y = newPosition.y-this.height/2;
        }
    }



    //--------------------------- the gamediv include static game zone and some element s like time&&score&&waste&&wasste label -------------------------------------------------------

    // this 3 element will always displayed on screen while the waste pic,game element and wstelabel sometimes will be removed from the stage
    // aste pic,game element and wstelabel  will be added into stage  in placeTiles()
    // game time text






    // ------------ initial first intropage
    var intropage = PIXI.Sprite.fromImage("public/imgs/game2/game2level1intro.png");
    intropage.alpha= 0;
    intropage.anchor.set(0.5);
    intropage.x = window.innerWidth/2;
    intropage.y = window.innerHeight/2;
    intropage.scale.set(1.3);
    intropage.buttonMode = true;
    intropage.interactive = true;

    // ------------ initial start page intropage, currentlly it is only an interactive pic
    var startPage = PIXI.Sprite.fromImage("public/imgs/game1/start.png");






    //----------------------------------------------------------------------------------------------------------------------- level1 countdown funciton


    function level1countdownseconds()
    {
        second--;
        if(second>5&&second<=7)
        {
            richText.setStyle(style);
            timer = setTimeout('level1countdownseconds()',1000);
            richText.text = "Level 1";
        }else if(second>3&&second<=5)
        {
            richText.setStyle(style2);
            timer = setTimeout('level1countdownseconds()',1000);
            richText.text = "According to the waste";
        }
        else if (second>0&&second<=3){

            if(second ==3){
                countDown_sound.play();
            }
            richText.setStyle(style);
            richText.text = second;
            timer = setTimeout('level1countdownseconds()',1000);
        }else if (second == 0)
        {
            richText.setStyle(style);
            richText.text = "Go!"
            timer = setTimeout('level1countdownseconds()',1000);
        }
        else if (second < 0)
        {
            // start counting  level1 game tiem ( 60 seconds)
            gameTimer = countdown60secondsgametime('countdown60secondsgametime()',1000);

            // remove count down text
            stage.removeChild(richText);

            // place level 1 game zone
              placeTiles();
            // clear timer
            clearTimeout(timer);
        }
    }

    //----------------------------------------------------------------------------------------------------------------------- level3 countdown

    function countdown3seconds()
    {

        second2--;
        if(second2>7&&second2<=9)
        {
            richText.setStyle(style);
            richText.text = 'Level 2';
            timer2 = setTimeout('countdown3seconds()',1000);//��������ʵ��

        }
        else if(second2>5&&second2<=7)
        {
            richText.setStyle(style);
            richText.text = second2;
            timer2 = setTimeout('countdown3seconds()',1000);//��������ʵ��

        } else if(second2>0&&second2<=3)
        {
            richText.setStyle(style);
            richText.text = second2;
            timer2 = setTimeout('countdown3seconds()',1000);//��������ʵ��

        }
        else if (second2 == 0)
        {
            richText.setStyle(style);
            richText.text = "Go!"
            timer2 = setTimeout('countdown3seconds()',1000);//��������ʵ��

        }else if(second2<0){
            gameTime = 60;
            richText.text = 60;
            stage.removeChild(richText);
            gameTimer = countdown60secondsgametime('countdown60secondsgametime()',1000);
            newRound = true;
			placeTiles2();
            renderer.render(stage);
            clearTimeout(timer2);
        }
    }


    //----------------------------------------------------------------------------------------------------------------------- this is game time timer

    function countdown60secondsgametime() {

        gameTime--;

        if(gameTime>=0)
        {
            timeTextLabel.text = gameTime;

            if (gameTime == 0)  // if a level game time up, go into next level
            {
                if(level ==1){
                richText.text = "Next Level"     // show next level 1 second
                }else if (level ==2){
                    richText.text = "Time UP"
                }
                stage.addChild(richText);
                canPick = false;                   // do not allow to pick color block anymore
            }
            renderer.render(stage);
            gameTimer = setTimeout('countdown60secondsgametime()',1000);
        }
        if(gameTime == -1 )
        {

            if(level==1){
            stage.removeChildren(6, stage.children.length);
            isgamesatrt = false;              // stop game
            newRound = false;                 // reset newRound
            newlevel=true;                     // reset new level

            canPick=false;
            round = 0;
            totlalError = 0;
            selectedRightColor =0;


            level++;                            // next level
            document.getElementById('introResultdiv').style.display = "block"; // show introResultdiv Div


            intropage = PIXI.Sprite.fromImage("public/imgs/game2/game2level2intro.png");
            intropage.alpha= 0;

            introResultstage.addChild(introResultdivrendergraphics);  // add animation engine

            intropageshow = true;

            }else if (level ==2 ){

                backGround_sound.pause();
                animationcount = 0;
//                stage.removeChildren(0, stage.children.length);
                isgamesatrt = false;              // stop game
                newRound = false;                 // reset newRound
                newlevel=true;                     // reset new level

                round = 0;
                totlalError = 0;
                selectedRightColor =0;


                level=1;   //reset level
                document.getElementById('introResultdiv').style.display = "block"; // show introResultdiv Div
                introResultstage.addChild(introResultdivrendergraphics);
                isgamesatrt = false;
                isgameover = true;



            }
            clearTimeout(gameTimer);
        }

    }

    //---------------------------------------------    start page event
    startPage.mousedown = startPage.touchstart = function(data){
        if(level==1) {
            // display level1 countdown music
                countDown_sound.play();
        }else if(level ==2){

            isgamesatrt = true;
            countDown_sound2.play();
            // palce second level sound
        }
        introResultdivrendergraphics.clear();
        introResultstage.removeChildren(0,introResultstage.children.length);
        introResultdivrenderer.render(introResultstage)
        // hide the introResultdiv DIV
        document.getElementById('introResultdiv').style.display="none";
        // start game
        isgamesatrt = true;

    }
    bgstage.addChild(s_bg);
    animate();




    function animate() {

        if(!isgamesatrt){  // if game is not stat or gameover

            if(intropageshow){  // if show intropageshow

                    if( Math.sin(animationcount)* 2000<=900) {  // before intropage micro animation
                        // satr micro animation
                        intropage.alpha += 0.2;
                        introResultdivrendergraphics.clear();
                        introResultdivrendergraphics.beginFill(0x0598f2, 0.85);
                        introResultdivrendergraphics.drawCircle(-20, 0, Math.abs(Math.sin(animationcount)) * 1500);
                        introResultdivrendergraphics.endFill();
                        introResultdivrendergraphics.beginFill(0x00306f, 1);
                        introResultdivrendergraphics.drawCircle(window.innerWidth + 150, window.innerHeight - 200, Math.abs(Math.sin(animationcount * 1.5)) * 2600);
                        introResultdivrendergraphics.endFill();
                        introResultdivrenderer.render(introResultstage);
                        animationcount+=0.1;
                    }else  // after the microanimation thow intropage
                    {
                       // end micro anmimation add game intro page

                        intropage.anchor.set(0.5);
                        intropage.x = window.innerWidth/2;
                        intropage.y = window.innerHeight/2;
                        intropage.scale.set(1.3);

                        intropage.buttonMode = true;
                        intropage.interactive = true;

                        // add ingtropage click event

                        intropage.mousedown = intropage.touchstart = function (data) {

                            if(level ==1) // if  level1 paly backgrould music
                            {
                                backGround_sound.play();
                            }
                            // remove this intro pic
                            introResultstage.removeChild(intropage);
                            introResultdivrenderer.render(introResultstage);
                            // show start page
                            isstartshow = true;
                        }

                        introResultstage.addChild(intropage);

                        introResultdivrenderer.render(introResultstage);
                        animationcount = 0;
                        intropageshow= false;
                    }
               }

            if(!intropageshow&&isstartshow)   // finish show intropage then show start screen
              {
                    if (Math.sin(animationcount*1.5) * 2000 < 1200) {  // before startpage show  micro animation first
                        introResultdivrendergraphics.clear();
                        introResultdivrendergraphics.beginFill(0x0598f2, 0.85);
                        introResultdivrendergraphics.drawCircle(-100, 0, Math.sin(animationcount*2.5) * 1400);
                        introResultdivrendergraphics.endFill();
                        introResultdivrendergraphics.beginFill(0x00306f, 0.95);
                        introResultdivrendergraphics.drawCircle(window.innerWidth + 150, window.innerHeight - 200, Math.sin(animationcount * 1.6) * 1200);
                        //							introResultdivrendergraphics.drawCircle(window.innerWidth/2, window.innerHeight/2+190,Math.cos(circlecount)* 100);
                        introResultdivrendergraphics.endFill();
                        introResultdivrenderer.render(introResultstage);
                        animationcount += 0.2;
                    } else {   // after the microanimation thow startpage

                        //reset animation count
                        animationcount = 0;

                        startPage.anchor.set(0.5);
                        startPage.x = window.innerWidth/2;
                        startPage.y = window.innerHeight/2;
                        startPage.scale.set(1.3);

                        startPage.buttonMode = true;
                        startPage.interactive = true;
                        introResultstage.addChild(startPage);
                        introResultdivrenderer.render(introResultstage);
                        isstartshow= false;
                    }
            }

            if (!intropageshow&&!isstartshow&&isgameover)  // shwo game over screen
            {
                // shwo micro animation

                if( Math.sin(animationcount)<=0.4) {

                    introResultdivrendergraphics.clear();
                    introResultdivrendergraphics.beginFill(0x0598f2, 0.85);
//								introResultdivrendergraphics.drawCircle(window.innerWidth/2,window.innerHeight/2, Math.sin(circlecount)* 2000);
                    introResultdivrendergraphics.drawCircle(window.innerWidth/2, -80, Math.abs(Math.sin(animationcount)) * 1800);
                    introResultdivrendergraphics.endFill();
                    introResultdivrendergraphics.beginFill(0x00306f, 0.95);
                    introResultdivrendergraphics.drawCircle(window.innerWidth/2, window.innerHeight, Math.abs(Math.sin(animationcount * 1.5)) * 1800);
                    //							introResultdivrendergraphics.drawCircle(window.innerWidth/2, window.innerHeight/2+190,Math.cos(circlecount)* 100);
                    introResultdivrendergraphics.endFill();

                    introResultdivrenderer.render(introResultstage);
                    animationcount += 0.2;
                }else{

                    isgameover = false;


                    introResultstage.addChild(try_again_btn);
                    introResultstage.addChild(back_btn);

                    setTimeout(function () {

                        var gameoveText = new PIXI.Text('Game Over!',gameoverStyle);
                        gameoveText.anchor.set(0.5);

                        gameoveText.y = window.innerHeight/2-270;
                        gameoveText.x = window.innerWidth/2;

                        introResultstage.addChild(gameoveText);
                        introResultdivrenderer.render(introResultstage);
                        //selectedTile.setTexture(PIXI.Texture.fromImage(selectedTile.theVal-3));

                    }, 1000);

                    setTimeout(function () {

                        var resluText = new PIXI.Text('Your final score is: '+ totalScore,style2);
                        resluText.anchor.set(0.5);

                        resluText.y = window.innerHeight/2+150;
                        resluText.x = window.innerWidth/2;

                        introResultstage.addChild(resluText);
                        introResultdivrenderer.render(introResultstage);
                        //selectedTile.setTexture(PIXI.Texture.fromImage(selectedTile.theVal-3));

                    }, 2000);




                }
            }
        }
        else if(isgamesatrt){

            if (level == 1) {
                if(newlevel){

                    newRound = false;
                    newlevel = false;
                    timer = level1countdownseconds('level1countdownseconds()',1000);

                }else{

              if (newRound) {
                        placeTiles();
                        renderer.render(stage);
                    }

                }
            }else if (level==2){


                if(newlevel){

                    newRound = false;
                    stage.addChild(richText);
                    newlevel = false;
                    timer2 = countdown3seconds('countdown3seconds()',1000);

                }else{
                    if (newRound) {

                        placeTiles2();
                        renderer.render(stage);

                    }
                }
            }
        }

        circlecount+=0.1;




        // bg micro animation
        bggraph.clear();

        bggraph.beginFill(0x00b7ee,(0.2 + Math.cos(circlecount)*0.2));
//                            bggraph.moveTo(window.innerWidth/2,window.innerHeight/2+200);
        bggraph.drawCircle(window.innerWidth/2, window.innerHeight/2+190, 430+ Math.cos(circlecount*0.3) *140);
        bggraph.endFill();

        bggraph.beginFill(0x00b7ee,0.2);
        bggraph.drawCircle(window.innerWidth/2, window.innerHeight/2+190, 410+ Math.cos(circlecount*0.5)* 120);
        bggraph.endFill();

        bggraph.beginFill(0x47daff,0.3);
        bggraph.drawCircle(window.innerWidth/2, window.innerHeight/2+190, 380+ Math.cos(circlecount*0.3)* 30);
        bggraph.endFill();

        // just for fun, let's rotate mr rabbit a little
        coinLogoPic.rotation += 0.002;

        coinLogoPic2.rotation -= 0.002;

        // render the stage




        rottimes++;

        if((rottimes%40)<0){


            s_bg.rotation  += 0.005;
        }else if(rottimes%40>=0){

            if((rottimes%40) ==0){

                isReverse = !isReverse;
            }

            if(isReverse){
                s_bg.rotation  -= 0.005;

            }else if (!isReverse){
                s_bg.rotation  += 0.005;

            }

        }
        bgrenderer.render(bgstage);

        renderer.render(stage);
        requestAnimationFrame(animate);

    }


</script>

</body>
</html>
